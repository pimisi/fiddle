Angularjs dynamic ng-pattern validation

Notes

Most of the code is from Angular, tailored to the needs of this
When the checkbox is checked, the field is required
The field is not hidden when the required checkbox is false
The regular expression is simplified for the demo (valid is 3 digits)

$scope.phoneNumberPattern = (function() {
    var regexp = /^\(?(\d{3})\)?[ .-]?(\d{3})[ .-]?(\d{4})$/;
    return {
        test: function(value) {
            if( $scope.requireTel === false ) {
                return true;
            }
            return regexp.test(value);
        }
    };
})();

HTML
<input type="text" ng-model="..." ng-required="requireTel"
    ng-pattern="phoneNumberPattern" />

OR

<form name="telForm">
  <input name="cb" type='checkbox' data-ng-modal='requireTel'>
  <input name="tel" type="text" ng-model="..." ng-if='requireTel' ng-pattern="phoneNumberPattern" required/>
  <button type="submit" ng-disabled="telForm.$invalid || telForm.$pristine">Submit</button>
</form>

Pay attention to the second input: We can use an ng-if to control rendering and validation in forms. If the requireTel variable is unset, the second input would not only be hidden, but not rendered at all, thus the form will pass validation and the button will become enabled, and you'll get what you need.

================================

JavaScript equivalent to printf/string.format

if (!String.prototype.format) {
  String.prototype.format = function() {
    var args = arguments;
    return this.replace(/{(\d+)}/g, function(match, number) {
      return typeof args[number] != 'undefined'
        ? args[number]
        : match
      ;
    });
  };
}

Usage:
"{0} is dead, but {1} is alive! {0} {2}".format("ASP", "ASP.NET")

outputs

ASP is dead, but ASP.NET is alive! ASP {2}

If you prefer not to modify String's prototype:

if (!String.format) {
  String.format = function(format) {
    var args = Array.prototype.slice.call(arguments, 1);
    return format.replace(/{(\d+)}/g, function(match, number) {
      return typeof args[number] != 'undefined'
        ? args[number]
        : match
      ;
    });
  };
}
Gives you the much more familiar:

String.format('{0} is dead, but {1} is alive! {0} {2}', 'ASP', 'ASP.NET');

with the same result:

ASP is dead, but ASP.NET is alive! ASP {2}

If you have multiple strings appended to each other (with the +-operator),
be sure to put the complete String in parentheses: ("asd {0}"+"fas {1}").format("first", "second"); Otherwise,
the function will only be applied to the last string that was appended.


            /* return self.JSONRequest(mainUri).fetchJSONObject().$promise.then(function (data) {
             self.responsePayload = data;
             }, function (response) {
             var __response = getResponseError.call(self, response);

             // Check the error return from the server
             if (__response.responseData == null || __response.status == 404) {
             // Make the secondary call
             return self.JSONRequest(self.apiUriObject["fallback"]).fetchJSONObject()
             .$promise.then(function (data) {
             self.responsePayload = data;

             }, function (response) {
             console.log("Fallback failed");
             self.responseError = getResponseError.call(self, response);

             }).catch(function (response) {
             console.log("Fallback exception");
             self.responseError = getResponseError.call(self, response);

             });
             } else {
             self.responseError = __response;
             }
             console.log("Other Method");

             }).catch(function (response) {
             console.log("Failed");

             self.responseError = getResponseError.call(self, response);
             }); */